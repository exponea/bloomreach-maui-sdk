plugins {
    id 'com.android.library'
    id 'kotlin-android'
}

android {
    compileSdk 31

    defaultConfig {
        minSdk 21
        targetSdk 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

var AAR_LIBS_DIR = 'aarLibs'
var JAR_LIBS_DIR = 'jarLibs'

configurations {
    // create 'implementation' dependency behaviour and also
    // collect this and all sub-libs into aar/jar folders
    collectDependencyTree {
        transitive = true
        canBeResolved = true
    }
    // seems un-intuitive syntax but collectDependencyTree will behave as implementation
    implementation.extendsFrom collectDependencyTree
    // any implementation dependency in this project cannot leak to MAUI
    // but has to be swapped by MAUI nuget
    implementation.transitive = false
}

dependencies {
    collectDependencyTree ('com.exponea.sdk:sdk:3.7.0') {
        // exclude if will be replaced by MAUI/Xamarin alternative
        exclude group: 'com.google.code.gson', module: 'gson'
        exclude group: 'androidx.arch.core', module: 'core-common'
        exclude group: 'androidx.lifecycle', module: 'lifecycle-common'
        exclude group: 'com.google.guava', module: 'listenablefuture'
        exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib'
        exclude group: 'androidx.annotation', module: 'annotation'
        exclude group: 'org.jetbrains.kotlinx', module: 'kotlinx-coroutines-core-jvm'
        exclude group: 'org.jetbrains.kotlinx', module: 'kotlinx-coroutines-android'
        exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib-jdk8'
        exclude group: 'androidx.collection', module: 'collection'
        exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib-jdk7'
//        exclude group: 'org.jsoup', module: 'jsoup'
    }

    // Libs required by this wrapper. As this wrapper will be transformed to C#,
    // they need to be shared with MAUI, not exposed but used MAUI/Xamarin alternatives
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'androidx.arch.core:core-common:2.1.0'
    implementation 'androidx.lifecycle:lifecycle-common:2.1.0'
//    implementation 'com.google.guava:listenablefuture:1.0'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.7.21'
    implementation 'androidx.annotation:annotation:1.2.0'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core-jvm:1.5.0'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.5.0'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.5.0'
    implementation 'androidx.collection:collection:1.1.0'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.7.20'
    collectDependencyTree 'androidx.work:work-runtime:2.8.1'
    collectDependencyTree 'androidx.work:work-runtime-ktx:2.8.1'
//    implementation 'org.jsoup:jsoup:1.15.4'

    // ^ Also tip for lib/MAUI conflict:
    // You may facing build error: `Type androidx.arch.core.internal.SafeIterableMap is defined multiple times` so try to do:
    // 1. search for class, which lib it contains (via IDE or google it)
    // 2. run gradle dependencies for lib, find library, remember version
    // 3. exclude library from collectDependencyTree(SDK) ^^
    // 4. and add `implementation` dependency ^

    // tests
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'androidx.test:core:1.5.0'
    testImplementation "io.mockk:mockk:1.13.7"
    testImplementation "org.robolectric:robolectric:4.10.3"
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}

tasks.register('exposeAarLibsForMaui', Sync) {
    // fat-aar: This will extract aar file as filetree:
    // then easier merging could be done
//    from configurations.collectDependencyTree.findAll { it.name.endsWith('aar') }.collect { zipTree(it) }
//    into AAR_LIBS_DIR

    from configurations.collectDependencyTree
    include '*.aar'
    into AAR_LIBS_DIR

    configurations.collectDependencyTree.forEach {
        var targetDir = JAR_LIBS_DIR
        if (it.name.toLowerCase().endsWith('aar')) {
            targetDir = AAR_LIBS_DIR
        }
        println '<AndroidLibrary Include="..\\ExponeaSDKMauiAndroid\\lib\\' + targetDir + '\\' + it.name + '"  />'
    }
}
tasks.register('exposeJarLibsForMaui', Sync) {
    from configurations.collectDependencyTree
    include '*.jar'
    into JAR_LIBS_DIR
}
afterEvaluate {
    android.libraryVariants.configureEach { variant ->
        variant.getJavaCompileProvider().orNull?.dependsOn(
                exposeAarLibsForMaui,
                exposeJarLibsForMaui
        )
    }
}

clean.doFirst {
    delete "$buildDir/$AAR_LIBS_DIR/*"
}

task cleanLibsFolder(type: Delete) {
    delete AAR_LIBS_DIR, JAR_LIBS_DIR
}

tasks.clean.dependsOn(tasks.cleanLibsFolder)
