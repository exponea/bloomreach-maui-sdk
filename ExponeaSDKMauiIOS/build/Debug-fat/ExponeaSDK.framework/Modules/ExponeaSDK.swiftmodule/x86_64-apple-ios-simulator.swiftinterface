// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name ExponeaSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AppTrackingTransparency
import CoreData
@_exported import ExponeaSDK
import Foundation
import ObjectiveC
import Swift
import SwiftSoup
import SystemConfiguration
import UIKit
import UserNotifications
import WebKit
import _Concurrency
import _StringProcessing
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class AppInboxDetailViewController : UIKit.UIViewController, WebKit.WKUIDelegate {
  @_Concurrency.MainActor(unsafe) final public let pushContainer: UIKit.UIScrollView
  @_Concurrency.MainActor(unsafe) final public let messageImage: UIKit.UIImageView
  @_Concurrency.MainActor(unsafe) final public let receivedTime: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) final public let messageTitle: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) final public let message: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) final public let actionsContainer: UIKit.UIStackView
  @_Concurrency.MainActor(unsafe) final public let actionMain: UIKit.UIButton
  @_Concurrency.MainActor(unsafe) final public let action1: UIKit.UIButton
  @_Concurrency.MainActor(unsafe) final public let action2: UIKit.UIButton
  @_Concurrency.MainActor(unsafe) final public let action3: UIKit.UIButton
  @_Concurrency.MainActor(unsafe) final public let action4: UIKit.UIButton
  @_Concurrency.MainActor(unsafe) final public let htmlContainer: WebKit.WKWebView
  @_Concurrency.MainActor(unsafe) open func withData(_ source: ExponeaSDK.MessageItem)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) open func translateReceivedTime(_ source: Foundation.Date) -> Swift.String
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public class AppInboxListItemStyle {
  public init(backgroundColor: Swift.String? = nil, readFlag: ExponeaSDK.ImageViewStyle? = nil, receivedTime: ExponeaSDK.TextViewStyle? = nil, title: ExponeaSDK.TextViewStyle? = nil, content: ExponeaSDK.TextViewStyle? = nil, image: ExponeaSDK.ImageViewStyle? = nil)
  public func applyTo(_ target: ExponeaSDK.MessageItemCell)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class AppInboxListViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) final public let XMARK_ICON_DATA: Swift.String
  @_Concurrency.MainActor(unsafe) final public let statusContainer: UIKit.UIStackView
  @_Concurrency.MainActor(unsafe) final public let statusProgress: UIKit.UIActivityIndicatorView
  @_Concurrency.MainActor(unsafe) final public let statusEmptyTitle: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) final public let statusEmptyMessage: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) final public let statusErrorTitle: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) final public let statusErrorMessage: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) final public let tableView: UIKit.UITableView
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension ExponeaSDK.AppInboxListViewController : UIKit.UITableViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
}
extension ExponeaSDK.AppInboxListViewController : UIKit.UITableViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
}
public class AppInboxListViewStyle {
  public init(backgroundColor: Swift.String? = nil, item: ExponeaSDK.AppInboxListItemStyle? = nil)
  public func applyTo(_ target: UIKit.UITableView)
  @objc deinit
}
public protocol AppInboxProvider {
  func getAppInboxButton() -> UIKit.UIButton
  func getAppInboxListViewController() -> UIKit.UIViewController
  func getAppInboxDetailViewController(_ messageId: Swift.String) -> UIKit.UIViewController
  func getAppInboxListTableViewCell(_ cell: UIKit.UITableViewCell) -> UIKit.UITableViewCell
}
public struct AppInboxResponse : Swift.Codable {
  public let success: Swift.Bool
  public let messages: [ExponeaSDK.MessageItem]?
  public let syncToken: Swift.String?
  public init(from decoder: Swift.Decoder) throws
  public init(success: Swift.Bool, messages: [ExponeaSDK.MessageItem]?, syncToken: Swift.String?)
  public func encode(to encoder: Swift.Encoder) throws
}
public class AppInboxStyle {
  public init(appInboxButton: ExponeaSDK.ButtonStyle? = nil, detailView: ExponeaSDK.DetailViewStyle? = nil, listView: ExponeaSDK.ListScreenStyle? = nil)
  @objc deinit
}
public class AppInboxStyleParser {
  public init(_ configMap: Foundation.NSDictionary)
  public func parse() throws -> ExponeaSDK.AppInboxStyle
  @objc deinit
}
@available(swift 5.1)
@propertyWrapper final public class Atomic<Value> {
  final public var wrappedValue: Value {
    get
    set
  }
  final public var projectedValue: ExponeaSDK.Atomic<Value> {
    get
  }
  public init(wrappedValue value: Value)
  final public func changeValue(with mutation: (inout Value) -> Swift.Void)
  @objc deinit
}
public enum Authorization : Swift.Equatable, Swift.Codable {
  case none
  case token(Swift.String)
  case bearer(token: Swift.String)
  public init(from decoder: Swift.Decoder) throws
  public init(from string: Swift.String?)
  public func encode(to encoder: Swift.Encoder) throws
  public func encode() -> Swift.String?
  public static func == (a: ExponeaSDK.Authorization, b: ExponeaSDK.Authorization) -> Swift.Bool
}
extension ExponeaSDK.Authorization : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension ExponeaSDK.Authorization : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
public class ButtonStyle {
  public init(textOverride: Swift.String? = nil, textColor: Swift.String? = nil, backgroundColor: Swift.String? = nil, showIcon: Swift.Bool? = nil, textSize: Swift.String? = nil, enabled: Swift.Bool? = nil, borderRadius: Swift.String? = nil, textWeight: Swift.String? = nil)
  public func applyTo(_ target: UIKit.UIButton)
  @objc deinit
}
public struct CalculatorData {
  public let height: CoreFoundation.CGFloat
  public let placeholderId: Swift.String
}
public struct CampaignData {
  public let source: Swift.String?
  public let campaign: Swift.String?
  public let content: Swift.String?
  public let medium: Swift.String?
  public let term: Swift.String?
  public let payload: Swift.String?
  public let timestamp: Foundation.TimeInterval
  public let url: Swift.String?
  public init(source: Swift.String? = nil, campaign: Swift.String? = nil, content: Swift.String? = nil, medium: Swift.String? = nil, term: Swift.String? = nil, payload: Swift.String? = nil)
  public init(url: Foundation.URL)
  public var trackingData: [Swift.String : ExponeaSDK.JSONValue] {
    get
  }
}
extension ExponeaSDK.CampaignData : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension ExponeaSDK.CampaignData : Swift.Equatable {
  public static func == (lhs: ExponeaSDK.CampaignData, rhs: ExponeaSDK.CampaignData) -> Swift.Bool
}
extension ExponeaSDK.CampaignData : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
public struct Configuration : Swift.Codable, Swift.Equatable {
  public var projectMapping: [ExponeaSDK.EventType : [ExponeaSDK.ExponeaProject]]? {
    get
  }
  public var projectToken: Swift.String {
    get
  }
  public var authorization: ExponeaSDK.Authorization {
    get
  }
  public var baseUrl: Swift.String {
    get
  }
  public var inAppContentBlocksPlaceholders: [Swift.String]?
  public var defaultProperties: [Swift.String : ExponeaSDK.JSONConvertible]?
  public var sessionTimeout: Swift.Double
  public var automaticSessionTracking: Swift.Bool
  public var automaticPushNotificationTracking: Swift.Bool {
    get
  }
  public var requirePushAuthorization: Swift.Bool {
    get
  }
  public var tokenTrackFrequency: ExponeaSDK.TokenTrackFrequency {
    get
  }
  public var appGroup: Swift.String? {
    get
  }
  public var flushEventMaxRetries: Swift.Int {
    get
  }
  public var allowDefaultCustomerProperties: Swift.Bool {
    get
  }
  public var advancedAuthEnabled: Swift.Bool
  public var customAuthProvider: ExponeaSDK.AuthorizationProviderType? {
    get
  }
  public init(projectToken: Swift.String?, projectMapping: [ExponeaSDK.EventType : [ExponeaSDK.ExponeaProject]]? = nil, authorization: ExponeaSDK.Authorization, baseUrl: Swift.String?, appGroup: Swift.String? = nil, defaultProperties: [Swift.String : ExponeaSDK.JSONConvertible]? = nil, inAppContentBlocksPlaceholders: [Swift.String]? = nil, allowDefaultCustomerProperties: Swift.Bool? = nil, advancedAuthEnabled: Swift.Bool? = nil) throws
  public init(projectToken: Swift.String, projectMapping: [ExponeaSDK.EventType : [ExponeaSDK.ExponeaProject]]?, authorization: ExponeaSDK.Authorization = .none, baseUrl: Swift.String, defaultProperties: [Swift.String : ExponeaSDK.JSONConvertible]?, inAppContentBlocksPlaceholders: [Swift.String]? = nil, sessionTimeout: Swift.Double, automaticSessionTracking: Swift.Bool = true, automaticPushNotificationTracking: Swift.Bool, requirePushAuthorization: Swift.Bool = true, tokenTrackFrequency: ExponeaSDK.TokenTrackFrequency, appGroup: Swift.String?, flushEventMaxRetries: Swift.Int, allowDefaultCustomerProperties: Swift.Bool?, advancedAuthEnabled: Swift.Bool?) throws
  public init(plistName: Swift.String) throws
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public static func == (lhs: ExponeaSDK.Configuration, rhs: ExponeaSDK.Configuration) -> Swift.Bool
}
extension ExponeaSDK.Configuration {
  public func projects(for eventType: ExponeaSDK.EventType) -> [ExponeaSDK.ExponeaProject]
  public var mainProject: ExponeaSDK.ExponeaProject {
    get
  }
  public var mutualExponeaProject: ExponeaSDK.ExponeaProject {
    get
  }
}
extension ExponeaSDK.Configuration : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
  public var hostname: Swift.String {
    get
  }
}
@objc(AuthorizationProviderType) public protocol AuthorizationProviderType {
  @objc init()
  @objc func getAuthorizationToken() -> Swift.String?
}
extension ExponeaSDK.Configuration {
  public mutating func switchProjects(mainProject: ExponeaSDK.ExponeaProject, projectMapping: [ExponeaSDK.EventType : [ExponeaSDK.ExponeaProject]]?)
}
extension ExponeaSDK.Configuration {
  public static func loadFromUserDefaults(appGroup: Swift.String) -> ExponeaSDK.Configuration?
  public func saveToUserDefaults()
}
public struct Consent : Swift.Codable {
  public let id: Swift.String
  public let legitimateInterest: Swift.Bool
  public let sources: ExponeaSDK.ConsentSources
  public let translations: [Swift.String : [Swift.String : Swift.String?]]
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct ConsentSources : Swift.Codable {
  public let isCreatedFromCRM: Swift.Bool
  public let isImported: Swift.Bool
  public let isFromConsentPage: Swift.Bool
  public let privateAPI: Swift.Bool
  public let publicAPI: Swift.Bool
  public let isTrackedFromScenario: Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct ConsentsResponse : Swift.Codable {
  public let consents: [ExponeaSDK.Consent]
  public let success: Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum Constants {
  public enum Repository {
    public static let baseUrl: Swift.String
    public static let contentType: Swift.String
    public static let headerContentType: Swift.String
    public static let headerAccept: Swift.String
    public static let headerContentLenght: Swift.String
    public static let headerAuthorization: Swift.String
  }
  public enum Keys {
    public static let token: Swift.String
    public static let authorization: Swift.String
    public static let installTracked: Swift.String
    public static let sessionStarted: Swift.String
    public static let sessionEnded: Swift.String
    public static let timeout: Swift.String
    public static let autoSessionTrack: Swift.String
    public static let appVersion: Swift.String
    public static let baseUrl: Swift.String
  }
  public enum DeviceInfo {
    public static let osName: Swift.String
    public static let osVersion: Swift.String
    public static let sdk: Swift.String
    public static let deviceModel: Swift.String
  }
  public enum EventTypes {
    public static let installation: Swift.String
    public static let sessionEnd: Swift.String
    public static let sessionStart: Swift.String
    public static let payment: Swift.String
    public static let pushOpen: Swift.String
    public static let pushDelivered: Swift.String
    public static let campaignClick: Swift.String
    public static let banner: Swift.String
    public static let appInbox: Swift.String
  }
  public enum ErrorMessages {
    public static let sdkNotConfigured: Swift.String
  }
  public enum SuccessMessages {
    public static let sessionStart: Swift.String
    public static let sessionEnd: Swift.String
  }
  public enum Session {
    public static let defaultTimeout: Swift.Double
    public static let maxRetries: Swift.Int
    public static let sessionUpdateThreshold: Swift.Double
  }
  public enum Tracking {
    public static let immediateFlushDelay: Swift.Double
  }
  public enum General {
    public static let iTunesStore: Swift.String
    public static let userDefaultsSuite: Swift.String
    public static let deliveredPushUserDefaultsKey: Swift.String
    public static let openedPushUserDefaultsKey: Swift.String
    public static let savedCampaignClickEvent: Swift.String
    public static let inAppMessageDisplayStatusUserDefaultsKey: Swift.String
    public static let lastKnownConfiguration: Swift.String
    public static let lastKnownCustomerIds: Swift.String
  }
}
public enum DatabaseManagerError : Foundation.LocalizedError {
  case unableToCreatePersistentContainer
  case unableToLoadPeristentStore(Swift.String)
  case notEnoughDiskSpace(Swift.String)
  case objectDoesNotExist
  case wrongObjectType
  case saveCustomerFailed(Swift.String)
  case unknownError(Swift.String?)
  public var errorDescription: Swift.String? {
    get
  }
}
public enum DataType : Swift.Equatable {
  case customerIds([Swift.String : Swift.String])
  case properties([Swift.String : ExponeaSDK.JSONValue])
  case timestamp(Swift.Double?)
  case eventType(Swift.String)
  case pushNotificationToken(token: Swift.String?, authorized: Swift.Bool)
  public static func == (a: ExponeaSDK.DataType, b: ExponeaSDK.DataType) -> Swift.Bool
}
extension Swift.Array where Element == ExponeaSDK.DataType {
  public var eventTypes: [Swift.String] {
    get
  }
  public var latestTimestamp: Swift.Double? {
    get
  }
  public var properties: [Swift.String : ExponeaSDK.JSONConvertible?] {
    get
  }
  public func addProperties(_ properties: [Swift.String : ExponeaSDK.JSONConvertible]?) -> [ExponeaSDK.DataType]
  public var customerIds: [Swift.String : Swift.String] {
    get
  }
}
extension ExponeaSDK.DataType : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct DateFilter : Swift.Codable, Swift.Equatable {
  public let enabled: Swift.Bool
  public let startDate: Foundation.Date?
  public let endDate: Foundation.Date?
  public init(enabled: Swift.Bool, startDate: Foundation.Date?, endDate: Foundation.Date?)
  public static func == (a: ExponeaSDK.DateFilter, b: ExponeaSDK.DateFilter) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
open class DefaultAppInboxProvider : ExponeaSDK.AppInboxProvider {
  final public let APPINBOX_BUTTON_ICON_DATA: Swift.String
  public init()
  open func getAppInboxButton() -> UIKit.UIButton
  open func getAppInboxListViewController() -> UIKit.UIViewController
  open func getAppInboxDetailViewController(_ messageId: Swift.String) -> UIKit.UIViewController
  open func getAppInboxListTableViewCell(_ cell: UIKit.UITableViewCell) -> UIKit.UITableViewCell
  @objc deinit
}
public class DetailViewStyle {
  public init(title: ExponeaSDK.TextViewStyle? = nil, content: ExponeaSDK.TextViewStyle? = nil, receivedTime: ExponeaSDK.TextViewStyle? = nil, image: ExponeaSDK.ImageViewStyle? = nil, button: ExponeaSDK.ButtonStyle? = nil)
  public func applyTo(_ target: ExponeaSDK.AppInboxDetailViewController)
  @objc deinit
}
extension UIKit.UIDevice {
  @_Concurrency.MainActor(unsafe) public static let modelName: Swift.String
}
public struct EventFilterEvent {
}
public enum EventFilterError : Foundation.LocalizedError {
  case encodingError(message: Swift.String)
  case decodingError(message: Swift.String)
  case incorrectOperandCount(filterOperator: ExponeaSDK.EventFilterOperator.Type, count: Swift.Int)
  public var errorDescription: Swift.String? {
    get
  }
}
public struct EventFilter : Swift.Codable, Swift.Equatable {
  public let eventType: Swift.String
  public init(eventType: Swift.String, filter: [ExponeaSDK.EventPropertyFilter])
  public static func == (a: ExponeaSDK.EventFilter, b: ExponeaSDK.EventFilter) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct EventPropertyFilter : Swift.Equatable {
  public static func == (lhs: ExponeaSDK.EventPropertyFilter, rhs: ExponeaSDK.EventPropertyFilter) -> Swift.Bool
}
extension ExponeaSDK.EventPropertyFilter : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public protocol EventFilterAttribute : Swift.Decodable, Swift.Encodable {
  var type: Swift.String { get }
  func isSet(in event: ExponeaSDK.EventFilterEvent) -> Swift.Bool
  func getValue(in event: ExponeaSDK.EventFilterEvent) -> Swift.String?
}
public protocol EventFilterOperator : Swift.Encodable {
  static var name: Swift.String { get }
  static var operandCount: Swift.Int { get }
  static func passes(event: ExponeaSDK.EventFilterEvent, attribute: ExponeaSDK.EventFilterAttribute, operands: [ExponeaSDK.EventFilterOperand]) -> Swift.Bool
}
public struct EventFilterOperand : Swift.Codable, Swift.Equatable {
  public static func == (a: ExponeaSDK.EventFilterOperand, b: ExponeaSDK.EventFilterOperand) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum EventType : Swift.String, Swift.Codable {
  case install
  case sessionStart
  case sessionEnd
  case customEvent
  case identifyCustomer
  case payment
  case registerPushToken
  case pushDelivered
  case pushOpened
  case campaignClick
  case banner
  case appInbox
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public typealias EmptyBlock = () -> Swift.Void
public typealias EmptyThrowsBlock = () throws -> Swift.Void
@_hasMissingDesignatedInitializers public class Exponea {
  public static let version: Swift.String
  public static var logger: ExponeaSDK.Logger
  public static func isExponeaNotification(userInfo: [Swift.AnyHashable : Any]) -> Swift.Bool
  @objc deinit
}
extension ExponeaSDK.Exponea {
  public struct ProjectSettings {
    public let projectToken: Swift.String
    public let authorization: ExponeaSDK.Authorization
    public let baseUrl: Swift.String
    public let projectMapping: [ExponeaSDK.EventType : [ExponeaSDK.ExponeaProject]]?
    public init(projectToken: Swift.String, authorization: ExponeaSDK.Authorization, baseUrl: Swift.String? = nil, projectMapping: [ExponeaSDK.EventType : [ExponeaSDK.ExponeaProject]]? = nil)
  }
  public struct AutomaticPushNotificationTracking {
    public static func enabled(appGroup: Swift.String, delegate: ExponeaSDK.PushNotificationManagerDelegate? = nil, requirePushAuthorization: Swift.Bool = true, tokenTrackFrequency: ExponeaSDK.TokenTrackFrequency = .onTokenChange) -> ExponeaSDK.Exponea.AutomaticPushNotificationTracking
    public static let disabled: ExponeaSDK.Exponea.AutomaticPushNotificationTracking
  }
  public struct PushNotificationTracking {
    public static func enabled(appGroup: Swift.String, delegate: ExponeaSDK.PushNotificationManagerDelegate? = nil, requirePushAuthorization: Swift.Bool = true, tokenTrackFrequency: ExponeaSDK.TokenTrackFrequency = .onTokenChange) -> ExponeaSDK.Exponea.PushNotificationTracking
    public static let disabled: ExponeaSDK.Exponea.PushNotificationTracking
  }
  public struct AutomaticSessionTracking {
    public static func enabled(timeout: Swift.Double = Constants.Session.defaultTimeout) -> ExponeaSDK.Exponea.AutomaticSessionTracking
    public static let disabled: ExponeaSDK.Exponea.AutomaticSessionTracking
  }
  public struct FlushingSetup {
    public static let `default`: ExponeaSDK.Exponea.FlushingSetup
    public init(mode: ExponeaSDK.FlushingMode, maxRetries: Swift.Int = Constants.Session.maxRetries)
  }
}
extension ExponeaSDK.ExponeaInternal {
  @available(*, deprecated, message: "Automatic push notification tracking is deprecated. Find more information in the documentation. https://github.com/exponea/exponea-ios-sdk/blob/develop/Documentation/PUSH.md")
  public func configure(_ projectSettings: ExponeaSDK.Exponea.ProjectSettings, automaticPushNotificationTracking: ExponeaSDK.Exponea.AutomaticPushNotificationTracking, automaticSessionTracking: ExponeaSDK.Exponea.AutomaticSessionTracking = .enabled(), defaultProperties: [Swift.String : ExponeaSDK.JSONConvertible]? = nil, inAppContentBlocksPlaceholders: [Swift.String]? = nil, flushingSetup: ExponeaSDK.Exponea.FlushingSetup = Exponea.FlushingSetup.default, allowDefaultCustomerProperties: Swift.Bool? = nil, advancedAuthEnabled: Swift.Bool? = nil)
  public func configure(_ projectSettings: ExponeaSDK.Exponea.ProjectSettings, pushNotificationTracking: ExponeaSDK.Exponea.PushNotificationTracking, automaticSessionTracking: ExponeaSDK.Exponea.AutomaticSessionTracking = .enabled(), defaultProperties: [Swift.String : ExponeaSDK.JSONConvertible]? = nil, inAppContentBlocksPlaceholders: [Swift.String]? = nil, flushingSetup: ExponeaSDK.Exponea.FlushingSetup = Exponea.FlushingSetup.default, allowDefaultCustomerProperties: Swift.Bool? = nil, advancedAuthEnabled: Swift.Bool? = nil)
  public func setAutomaticSessionTracking(automaticSessionTracking: ExponeaSDK.Exponea.AutomaticSessionTracking)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class ExponeaAppDelegate : ObjectiveC.NSObject, UserNotifications.UNUserNotificationCenterDelegate, UIKit.UIApplicationDelegate {
  @discardableResult
  @_Concurrency.MainActor(unsafe) @objc open func application(_ application: UIKit.UIApplication, didFinishLaunchingWithOptions launchOptions: [UIKit.UIApplication.LaunchOptionsKey : Any]?) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc open func application(_ application: UIKit.UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Foundation.Data)
  @_Concurrency.MainActor(unsafe) @objc open func application(_ application: UIKit.UIApplication, didReceiveRemoteNotification userInfo: [Swift.AnyHashable : Any], fetchCompletionHandler completionHandler: @escaping (UIKit.UIBackgroundFetchResult) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) @objc open func userNotificationCenter(_ center: UserNotifications.UNUserNotificationCenter, didReceive response: UserNotifications.UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -> Swift.Void)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @objc deinit
}
public enum ExponeaError : Foundation.LocalizedError {
  case notConfigured
  case configurationError(Swift.String)
  case authorizationInsufficient
  case unknownError(Swift.String?)
  case nsExceptionRaised(Foundation.NSException)
  case nsExceptionInconsistency
  case stoppedProcess
  case missingProperty(property: Swift.String)
  case invalidType(for: Swift.String)
  case invalidValue(for: Swift.String)
  public var errorDescription: Swift.String? {
    get
  }
}
extension ExponeaSDK.Exponea {
  public static var shared: ExponeaSDK.ExponeaInternal {
    get
  }
}
@_hasMissingDesignatedInitializers public class ExponeaInternal : ExponeaSDK.ExponeaType {
  public var configuration: ExponeaSDK.Configuration? {
    get
  }
  public var customerCookie: Swift.String? {
    get
  }
  public var inAppContentBlocksManager: ExponeaSDK.InAppContentBlocksManagerType?
  public var flushingMode: ExponeaSDK.FlushingMode {
    get
    set
  }
  public var pushNotificationsDelegate: ExponeaSDK.PushNotificationManagerDelegate? {
    get
    set
  }
  public var inAppMessagesDelegate: ExponeaSDK.InAppMessageActionDelegate
  public var defaultProperties: [Swift.String : ExponeaSDK.JSONConvertible]? {
    get
    set
  }
  public var safeModeEnabled: Swift.Bool {
    get
    set
  }
  public var checkPushSetup: Swift.Bool
  public var appInboxProvider: ExponeaSDK.AppInboxProvider
  @objc deinit
}
extension ExponeaSDK.ExponeaInternal {
  public var isConfigured: Swift.Bool {
    get
  }
  @available(*, deprecated)
  public func configure(projectToken: Swift.String, authorization: ExponeaSDK.Authorization, baseUrl: Swift.String? = nil, appGroup: Swift.String? = nil, defaultProperties: [Swift.String : ExponeaSDK.JSONConvertible]? = nil, inAppContentBlocksPlaceholders: [Swift.String]? = nil, allowDefaultCustomerProperties: Swift.Bool? = nil, advancedAuthEnabled: Swift.Bool? = nil)
  public func configure(plistName: Swift.String)
  public func configure(with configuration: ExponeaSDK.Configuration)
  public func onInitSucceeded(callback completion: @escaping (() -> Swift.Void)) -> Self
  @available(*, deprecated)
  public func configure(projectToken: Swift.String, projectMapping: [ExponeaSDK.EventType : [ExponeaSDK.ExponeaProject]], authorization: ExponeaSDK.Authorization, baseUrl: Swift.String? = nil, appGroup: Swift.String? = nil, defaultProperties: [Swift.String : ExponeaSDK.JSONConvertible]? = nil, inAppContentBlocksPlaceholders: [Swift.String]? = nil, allowDefaultCustomerProperties: Swift.Bool? = nil, advancedAuthEnabled: Swift.Bool? = nil)
}
extension ExponeaSDK.ExponeaInternal {
  public func getAppInboxButton() -> UIKit.UIButton
  public func getAppInboxListViewController() -> UIKit.UIViewController
  public func getAppInboxDetailViewController(_ messageId: Swift.String) -> UIKit.UIViewController
}
extension ExponeaSDK.ExponeaInternal {
  public func fetchRecommendation<T>(with options: ExponeaSDK.RecommendationOptions, completion: @escaping (ExponeaSDK.Result<ExponeaSDK.RecommendationResponse<T>>) -> Swift.Void) where T : ExponeaSDK.RecommendationUserData
  public func fetchConsents(completion: @escaping (ExponeaSDK.Result<ExponeaSDK.ConsentsResponse>) -> Swift.Void)
  public func fetchAppInbox(completion: @escaping (ExponeaSDK.Result<[ExponeaSDK.MessageItem]>) -> Swift.Void)
  public func fetchAppInboxItem(_ messageId: Swift.String, completion: @escaping (ExponeaSDK.Result<ExponeaSDK.MessageItem>) -> Swift.Void)
}
extension ExponeaSDK.ExponeaInternal {
  public func trackEvent(properties: [Swift.String : ExponeaSDK.JSONConvertible], timestamp: Swift.Double?, eventType: Swift.String?)
  public func trackPayment(properties: [Swift.String : ExponeaSDK.JSONConvertible], timestamp: Swift.Double?)
  public func identifyCustomer(customerIds: [Swift.String : Swift.String]?, properties: [Swift.String : ExponeaSDK.JSONConvertible], timestamp: Swift.Double?)
  public func trackPushToken(_ token: Foundation.Data)
  public func trackPushToken(_ token: Swift.String?)
  public func trackPushOpened(with userInfo: [Swift.AnyHashable : Any])
  public func trackPushOpenedWithoutTrackingConsent(with userInfo: [Swift.AnyHashable : Any])
  public func trackPushReceived(content: UserNotifications.UNNotificationContent)
  public func trackPushReceived(userInfo: [Swift.AnyHashable : Any])
  public func trackPushReceivedWithoutTrackingConsent(content: UserNotifications.UNNotificationContent)
  public func trackPushReceivedWithoutTrackingConsent(userInfo: [Swift.AnyHashable : Any])
  public func trackSessionStart()
  public func trackSessionEnd()
  public func trackCampaignClick(url: Foundation.URL, timestamp: Swift.Double?)
  public func handlePushNotificationOpened(response: UserNotifications.UNNotificationResponse)
  public func handlePushNotificationOpened(userInfo: [Swift.AnyHashable : Any], actionIdentifier: Swift.String? = nil)
  public func handlePushNotificationOpenedWithoutTrackingConsent(userInfo: [Swift.AnyHashable : Any], actionIdentifier: Swift.String? = nil)
  public func handlePushNotificationToken(token: Swift.String)
  public func handlePushNotificationToken(deviceToken: Foundation.Data)
  public func flushData()
  public func flushData(completion: ((ExponeaSDK.FlushResult) -> Swift.Void)?)
  public func anonymize()
  public func anonymize(exponeaProject: ExponeaSDK.ExponeaProject, projectMapping: [ExponeaSDK.EventType : [ExponeaSDK.ExponeaProject]]?)
  public func trackInAppMessageClick(message: ExponeaSDK.InAppMessage, buttonText: Swift.String?, buttonLink: Swift.String?)
  public func trackInAppMessageClickWithoutTrackingConsent(message: ExponeaSDK.InAppMessage, buttonText: Swift.String?, buttonLink: Swift.String?)
  public func trackInAppMessageClose(message: ExponeaSDK.InAppMessage, isUserInteraction: Swift.Bool?)
  public func trackInAppMessageCloseClickWithoutTrackingConsent(message: ExponeaSDK.InAppMessage, isUserInteraction: Swift.Bool?)
  public func trackAppInboxOpened(message: ExponeaSDK.MessageItem)
  public func markAppInboxAsRead(_ message: ExponeaSDK.MessageItem, completition: ((Swift.Bool) -> Swift.Void)?)
  public func trackAppInboxOpenedWithoutTrackingConsent(message: ExponeaSDK.MessageItem)
  public func trackAppInboxClick(action: ExponeaSDK.MessageItemAction, message: ExponeaSDK.MessageItem)
  public func trackAppInboxClickWithoutTrackingConsent(action: ExponeaSDK.MessageItemAction, message: ExponeaSDK.MessageItem)
  public func trackInAppContentBlocksClick(message: ExponeaSDK.InAppContentBlockResponse, buttonText: Swift.String?, buttonLink: Swift.String?)
  public func trackInAppContentBlocksClose(message: ExponeaSDK.InAppContentBlockResponse, isUserInteraction: Swift.Bool?)
  public func trackInAppContentBlocksShow(message: ExponeaSDK.InAppContentBlockResponse)
}
public struct ExponeaNotificationAction : Swift.Codable {
  public let title: Swift.String
  public let action: ExponeaSDK.ExponeaNotificationActionType
  public let url: Swift.String?
  public var isTrackingForced: Swift.Bool {
    get
  }
  public init(from decoder: Swift.Decoder) throws
  public static func createNotificationAction(type: ExponeaSDK.ExponeaNotificationActionType, title: Swift.String, index: Swift.Int) -> UserNotifications.UNNotificationAction
  public func encode(to encoder: Swift.Encoder) throws
}
public enum ExponeaNotificationActionType : Swift.String, Swift.Codable {
  case openApp
  case browser
  case deeplink
  case selfCheck
  case none
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct ExponeaProject : Swift.Equatable, Swift.Codable {
  public let baseUrl: Swift.String
  public let projectToken: Swift.String
  public let authorization: ExponeaSDK.Authorization
  public init(baseUrl: Swift.String = Constants.Repository.baseUrl, projectToken: Swift.String, authorization: ExponeaSDK.Authorization)
  public init(from decoder: Swift.Decoder) throws
  public static func == (a: ExponeaSDK.ExponeaProject, b: ExponeaSDK.ExponeaProject) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
}
public protocol ExponeaType : AnyObject {
  var isConfigured: Swift.Bool { get }
  var configuration: ExponeaSDK.Configuration? { get }
  var customerCookie: Swift.String? { get }
  var flushingMode: ExponeaSDK.FlushingMode { get set }
  var pushNotificationsDelegate: ExponeaSDK.PushNotificationManagerDelegate? { get set }
  var inAppMessagesDelegate: ExponeaSDK.InAppMessageActionDelegate { get set }
  var appInboxProvider: ExponeaSDK.AppInboxProvider { get set }
  var inAppContentBlocksManager: ExponeaSDK.InAppContentBlocksManagerType? { get }
  var safeModeEnabled: Swift.Bool { get set }
  var checkPushSetup: Swift.Bool { get set }
  var defaultProperties: [Swift.String : ExponeaSDK.JSONConvertible]? { get set }
  func configure(_ projectSettings: ExponeaSDK.Exponea.ProjectSettings, pushNotificationTracking: ExponeaSDK.Exponea.PushNotificationTracking, automaticSessionTracking: ExponeaSDK.Exponea.AutomaticSessionTracking, defaultProperties: [Swift.String : ExponeaSDK.JSONConvertible]?, inAppContentBlocksPlaceholders: [Swift.String]?, flushingSetup: ExponeaSDK.Exponea.FlushingSetup, allowDefaultCustomerProperties: Swift.Bool?, advancedAuthEnabled: Swift.Bool?)
  func configure(projectToken: Swift.String, authorization: ExponeaSDK.Authorization, baseUrl: Swift.String?, appGroup: Swift.String?, defaultProperties: [Swift.String : ExponeaSDK.JSONConvertible]?, inAppContentBlocksPlaceholders: [Swift.String]?, allowDefaultCustomerProperties: Swift.Bool?, advancedAuthEnabled: Swift.Bool?)
  func configure(projectToken: Swift.String, projectMapping: [ExponeaSDK.EventType : [ExponeaSDK.ExponeaProject]], authorization: ExponeaSDK.Authorization, baseUrl: Swift.String?, appGroup: Swift.String?, defaultProperties: [Swift.String : ExponeaSDK.JSONConvertible]?, inAppContentBlocksPlaceholders: [Swift.String]?, allowDefaultCustomerProperties: Swift.Bool?, advancedAuthEnabled: Swift.Bool?)
  func configure(plistName: Swift.String)
  func trackEvent(properties: [Swift.String : ExponeaSDK.JSONConvertible], timestamp: Swift.Double?, eventType: Swift.String?)
  func trackCampaignClick(url: Foundation.URL, timestamp: Swift.Double?)
  func trackPayment(properties: [Swift.String : ExponeaSDK.JSONConvertible], timestamp: Swift.Double?)
  func identifyCustomer(customerIds: [Swift.String : Swift.String]?, properties: [Swift.String : ExponeaSDK.JSONConvertible], timestamp: Swift.Double?)
  func flushData()
  func flushData(completion: ((ExponeaSDK.FlushResult) -> Swift.Void)?)
  func trackPushToken(_ token: Foundation.Data)
  func trackPushToken(_ token: Swift.String?)
  func handlePushNotificationToken(deviceToken: Foundation.Data)
  func handlePushNotificationToken(token: Swift.String)
  func trackPushReceived(content: UserNotifications.UNNotificationContent)
  func trackPushReceived(userInfo: [Swift.AnyHashable : Any])
  func trackPushReceivedWithoutTrackingConsent(content: UserNotifications.UNNotificationContent)
  func trackPushReceivedWithoutTrackingConsent(userInfo: [Swift.AnyHashable : Any])
  func trackPushOpened(with userInfo: [Swift.AnyHashable : Any])
  func handlePushNotificationOpened(response: UserNotifications.UNNotificationResponse)
  func handlePushNotificationOpened(userInfo: [Swift.AnyHashable : Any], actionIdentifier: Swift.String?)
  func trackPushOpenedWithoutTrackingConsent(with userInfo: [Swift.AnyHashable : Any])
  func handlePushNotificationOpenedWithoutTrackingConsent(userInfo: [Swift.AnyHashable : Any], actionIdentifier: Swift.String?)
  func trackInAppMessageClickWithoutTrackingConsent(message: ExponeaSDK.InAppMessage, buttonText: Swift.String?, buttonLink: Swift.String?)
  func trackInAppMessageCloseClickWithoutTrackingConsent(message: ExponeaSDK.InAppMessage, isUserInteraction: Swift.Bool?)
  func trackAppInboxOpened(message: ExponeaSDK.MessageItem)
  func trackAppInboxOpenedWithoutTrackingConsent(message: ExponeaSDK.MessageItem)
  func trackAppInboxClick(action: ExponeaSDK.MessageItemAction, message: ExponeaSDK.MessageItem)
  func trackAppInboxClickWithoutTrackingConsent(action: ExponeaSDK.MessageItemAction, message: ExponeaSDK.MessageItem)
  func markAppInboxAsRead(_ message: ExponeaSDK.MessageItem, completition: ((Swift.Bool) -> Swift.Void)?)
  func getAppInboxButton() -> UIKit.UIButton
  func getAppInboxListViewController() -> UIKit.UIViewController
  func getAppInboxDetailViewController(_ messageId: Swift.String) -> UIKit.UIViewController
  func trackSessionStart()
  func trackSessionEnd()
  func fetchRecommendation<T>(with options: ExponeaSDK.RecommendationOptions, completion: @escaping (ExponeaSDK.Result<ExponeaSDK.RecommendationResponse<T>>) -> Swift.Void) where T : ExponeaSDK.RecommendationUserData
  func fetchConsents(completion: @escaping (ExponeaSDK.Result<ExponeaSDK.ConsentsResponse>) -> Swift.Void)
  func fetchAppInbox(completion: @escaping (ExponeaSDK.Result<[ExponeaSDK.MessageItem]>) -> Swift.Void)
  func fetchAppInboxItem(_ messageId: Swift.String, completion: @escaping (ExponeaSDK.Result<ExponeaSDK.MessageItem>) -> Swift.Void)
  func anonymize()
  func anonymize(exponeaProject: ExponeaSDK.ExponeaProject, projectMapping: [ExponeaSDK.EventType : [ExponeaSDK.ExponeaProject]]?)
  func trackInAppMessageClick(message: ExponeaSDK.InAppMessage, buttonText: Swift.String?, buttonLink: Swift.String?)
  func trackInAppMessageClose(message: ExponeaSDK.InAppMessage, isUserInteraction: Swift.Bool?)
}
extension Swift.String {
  public func cleanedURL() -> Foundation.URL?
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func addSubviews(_ views: [UIKit.UIView])
  @_Concurrency.MainActor(unsafe) public func addSubviews(_ views: UIKit.UIView...)
}
public enum FlushResult {
  case success(Swift.Int)
  case flushAlreadyInProgress
  case noInternetConnection
  case error(Swift.Error)
}
public enum FlushingMode {
  case manual
  case automatic
  case periodic(Swift.Int)
  case immediate
}
public struct GdprTracking {
  public static func isTrackForced(_ url: Swift.String?) -> Swift.Bool
  public static func readTrackingConsentFlag(_ source: Any?) -> Swift.Bool
}
public struct GitHubReleaseResponse : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public class HtmlNormalizer {
  public init(_ originalHtml: Swift.String)
  public func normalize(_ config: ExponeaSDK.HtmlNormalizerConfig? = nil) -> ExponeaSDK.NormalizedResult
  public func collectImages() -> [Swift.String]
  @objc deinit
}
public enum ParsingError : Swift.Error {
  case imageError
  public static func == (a: ExponeaSDK.ParsingError, b: ExponeaSDK.ParsingError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct NormalizedResult {
  public var valid: Swift.Bool
  public var actions: [ExponeaSDK.ActionInfo]
  public var closeActionUrl: Swift.String?
  public var html: Swift.String?
}
public struct ActionInfo {
  public var buttonText: Swift.String
  public var actionUrl: Swift.String
}
public struct HtmlNormalizerConfig {
  public let makeResourcesOffline: Swift.Bool
  public let ensureCloseButton: Swift.Bool
  public let allowAnchorButton: Swift.Bool
}
public enum HTTPMethod : Swift.String {
  case post
  case put
  case get
  case delete
  case patch
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public class ImageViewStyle {
  public init(visible: Swift.Bool? = nil, backgroundColor: Swift.String? = nil)
  public func applyTo(_ target: UIKit.UIView)
  public func applyTo(_ target: UIKit.UIImageView)
  @objc deinit
}
public enum InAppContentBlockContentType : Swift.String, Swift.Codable, Swift.Hashable {
  case html
  case native
  public init?(status: Swift.String)
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@propertyWrapper public struct CodableIgnored<T> : Swift.Codable {
  public var wrappedValue: T?
  public init(wrappedValue: T?)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension Swift.KeyedDecodingContainer {
  public func decode<T>(_ type: ExponeaSDK.CodableIgnored<T>.Type, forKey key: Swift.KeyedDecodingContainer<K>.Key) throws -> ExponeaSDK.CodableIgnored<T>
}
extension Swift.KeyedEncodingContainer {
  public mutating func encode<T>(_ value: ExponeaSDK.CodableIgnored<T>, forKey key: Swift.KeyedEncodingContainer<K>.Key) throws
}
public struct InAppContentBlocksDataResponse : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct InAppContentBlockResponse : Swift.Codable {
  public struct DateFilter : Swift.Codable {
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public let id: Swift.String
  public let name: Swift.String
  public let dateFilter: ExponeaSDK.InAppContentBlockResponse.DateFilter
  @ExponeaSDK.CodableIgnored public var frequency: ExponeaSDK.InAppContentBlocksFrequency? {
    get
    set
    _modify
  }
  public var loadPriority: Swift.Int?
  public var contentType: ExponeaSDK.InAppContentBlockContentType?
  public var content: ExponeaSDK.Content?
  @ExponeaSDK.CodableIgnored public var normalizedHtml: Swift.String? {
    get
    set
    _modify
  }
  public var trackingConsentCategory: Swift.String?
  public let placeholders: [Swift.String]
  @ExponeaSDK.CodableIgnored public var displayState: ExponeaSDK.InAppContentBlocksDisplayStatus? {
    get
    set
    _modify
  }
  @ExponeaSDK.CodableIgnored public var personalizedMessage: ExponeaSDK.PersonalizedInAppContentBlockResponse? {
    get
    set
    _modify
  }
  @ExponeaSDK.CodableIgnored public var status: ExponeaSDK.InAppContentBlocksDisplayStatus? {
    get
    set
    _modify
  }
  @ExponeaSDK.CodableIgnored public var sessionStart: Foundation.Date? {
    get
    set
    _modify
  }
  @ExponeaSDK.CodableIgnored public var tags: Swift.Set<Swift.Int>? {
    get
    set
    _modify
  }
  @ExponeaSDK.CodableIgnored public var indexPath: Foundation.IndexPath? {
    get
    set
    _modify
  }
  public init(from decoder: Swift.Decoder) throws
  public init(id: Swift.String, name: Swift.String, dateFilter: ExponeaSDK.InAppContentBlockResponse.DateFilter, frequency: ExponeaSDK.InAppContentBlocksFrequency, placeholders: [Swift.String], tags: Swift.Set<Swift.Int>, loadPriority: Swift.Int, content: ExponeaSDK.Content?, personalized: ExponeaSDK.PersonalizedInAppContentBlockResponse?)
  public func encode(to encoder: Swift.Encoder) throws
}
public enum InAppContentBlocksFrequency : Swift.String {
  case always
  case onlyOnce
  case oncePerVisit
  case untilVisitorInteracts
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct InAppContentBlocksDisplayStatus : Swift.Codable, Swift.Equatable {
  public static func == (a: ExponeaSDK.InAppContentBlocksDisplayStatus, b: ExponeaSDK.InAppContentBlocksDisplayStatus) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public protocol InAppContentBlocksDataProviderType {
  func loadPersonalizedInAppContentBlocks<Data>(data: Data.Type, customerIds: [Swift.String : Swift.String], inAppContentBlocksIds: [Swift.String], completion: @escaping ExponeaSDK.TypeBlock<ExponeaSDK.ResponseData<Data>>) where Data : Swift.Decodable, Data : Swift.Encodable
  func getInAppContentBlocks<Data>(data: Data.Type, completion: @escaping ExponeaSDK.TypeBlock<ExponeaSDK.ResponseData<Data>>) where Data : Swift.Decodable, Data : Swift.Encodable
}
final public class InAppContentBlocksDataProvider {
  public init()
  @objc deinit
}
public struct ResponseData<Data> where Data : Swift.Decodable, Data : Swift.Encodable {
}
extension ExponeaSDK.InAppContentBlocksDataProvider : ExponeaSDK.InAppContentBlocksDataProviderType {
  final public func getInAppContentBlocks<Data>(data: Data.Type = Data.self, completion: @escaping ExponeaSDK.TypeBlock<ExponeaSDK.ResponseData<Data>>) where Data : Swift.Decodable, Data : Swift.Encodable
  final public func loadPersonalizedInAppContentBlocks<D>(data: D.Type = D.self, customerIds: [Swift.String : Swift.String], inAppContentBlocksIds: [Swift.String], completion: @escaping ExponeaSDK.TypeBlock<ExponeaSDK.ResponseData<D>>) where D : Swift.Decodable, D : Swift.Encodable
}
public protocol InAppContentBlocksManagerType {
  var contentRuleList: WebKit.WKContentRuleList? { get set }
  var refreshCallback: ExponeaSDK.TypeBlock<Foundation.IndexPath>? { get set }
  func prepareInAppContentBlockView(placeholderId: Swift.String, indexPath: Foundation.IndexPath) -> UIKit.UIView
  func prefetchPlaceholdersWithIds(ids: [Swift.String])
  func getUsedInAppContentBlocks(placeholder: Swift.String, indexPath: Foundation.IndexPath) -> ExponeaSDK.UsedInAppContentBlocks?
  func anonymize()
  func initBlocker()
  func loadInAppContentBlocksPlaceholders(completion: ExponeaSDK.EmptyBlock?)
  func getFilteredMessage(message: ExponeaSDK.InAppContentBlockResponse) -> Swift.Bool
  func prefetchPlaceholdersWithIds(input: [ExponeaSDK.InAppContentBlockResponse], ids: [Swift.String]) -> [ExponeaSDK.InAppContentBlockResponse]
  func filterPriority(input: [ExponeaSDK.InAppContentBlockResponse]) -> [Swift.Int : [ExponeaSDK.InAppContentBlockResponse]]
  func refreshStaticViewContent(staticQueueData: ExponeaSDK.StaticQueueData)
}
public struct InAppMessage : Swift.Codable, Swift.Equatable {
  public let id: Swift.String
  public let name: Swift.String
  public let rawMessageType: Swift.String?
  public var messageType: ExponeaSDK.InAppMessageType {
    get
  }
  public let rawFrequency: Swift.String
  public var frequency: ExponeaSDK.InAppMessageFrequency? {
    get
  }
  public let payload: ExponeaSDK.InAppMessagePayload?
  public let payloadHtml: Swift.String?
  public let isHtml: Swift.Bool
  public let variantId: Swift.Int
  public let variantName: Swift.String
  public let trigger: ExponeaSDK.EventFilter
  public let dateFilter: ExponeaSDK.DateFilter
  public let priority: Swift.Int?
  public let delayMS: Swift.Int?
  public var delay: Foundation.TimeInterval {
    get
  }
  public let timeoutMS: Swift.Int?
  public var timeout: Foundation.TimeInterval? {
    get
  }
  public var rawHasTrackingConsent: Swift.Bool?
  public var hasTrackingConsent: Swift.Bool {
    get
  }
  public var consentCategoryTracking: Swift.String?
  public init(id: Swift.String, name: Swift.String, rawMessageType: Swift.String?, rawFrequency: Swift.String, payload: ExponeaSDK.InAppMessagePayload? = nil, variantId: Swift.Int, variantName: Swift.String, trigger: ExponeaSDK.EventFilter, dateFilter: ExponeaSDK.DateFilter, priority: Swift.Int? = nil, delayMS: Swift.Int? = nil, timeoutMS: Swift.Int? = nil, payloadHtml: Swift.String?, isHtml: Swift.Bool?, hasTrackingConsent: Swift.Bool?, consentCategoryTracking: Swift.String?)
  public static func == (a: ExponeaSDK.InAppMessage, b: ExponeaSDK.InAppMessage) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct InAppMessageTrigger : Swift.Codable, Swift.Equatable {
  public let type: Swift.String?
  public let eventType: Swift.String?
  public static func == (a: ExponeaSDK.InAppMessageTrigger, b: ExponeaSDK.InAppMessageTrigger) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum InAppMessageFrequency : Swift.String {
  case always
  case onlyOnce
  case oncePerVisit
  case untilVisitorInteracts
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum InAppMessageType : Swift.String, Swift.CaseIterable {
  case modal
  case alert
  case fullscreen
  case slideIn
  case freeform
  public init?(rawValue: Swift.String)
  public typealias AllCases = [ExponeaSDK.InAppMessageType]
  public typealias RawValue = Swift.String
  public static var allCases: [ExponeaSDK.InAppMessageType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public struct InAppMessagePayload : Swift.Codable, Swift.Equatable {
  public let imageUrl: Swift.String?
  public let title: Swift.String?
  public let titleTextColor: Swift.String?
  public let titleTextSize: Swift.String?
  public let bodyText: Swift.String?
  public let bodyTextColor: Swift.String?
  public let bodyTextSize: Swift.String?
  public let buttons: [ExponeaSDK.InAppMessagePayloadButton]?
  public let backgroundColor: Swift.String?
  public let closeButtonColor: Swift.String?
  public let messagePosition: Swift.String?
  public let textPosition: Swift.String?
  public let textOverImage: Swift.Bool?
  public static func == (a: ExponeaSDK.InAppMessagePayload, b: ExponeaSDK.InAppMessagePayload) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct InAppMessagePayloadButton : Swift.Codable, Swift.Equatable {
  public let buttonText: Swift.String?
  public let rawButtonType: Swift.String?
  public var buttonType: ExponeaSDK.InAppMessageButtonType {
    get
  }
  public let buttonLink: Swift.String?
  public let buttonTextColor: Swift.String?
  public let buttonBackgroundColor: Swift.String?
  public static func == (a: ExponeaSDK.InAppMessagePayloadButton, b: ExponeaSDK.InAppMessagePayloadButton) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum InAppMessageButtonType : Swift.String {
  case cancel
  case deeplink
  case browser
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol InAppMessageActionDelegate : AnyObject {
  var overrideDefaultBehavior: Swift.Bool { get }
  var trackActions: Swift.Bool { get }
  func inAppMessageAction(with message: ExponeaSDK.InAppMessage, button: ExponeaSDK.InAppMessageButton?, interaction: Swift.Bool)
}
public struct InAppMessageButton : Swift.Codable {
  public let text: Swift.String?
  public let url: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class DefaultInAppDelegate : ExponeaSDK.InAppMessageActionDelegate {
  final public let overrideDefaultBehavior: Swift.Bool
  final public let trackActions: Swift.Bool
  public func inAppMessageAction(with message: ExponeaSDK.InAppMessage, button: ExponeaSDK.InAppMessageButton?, interaction: Swift.Bool)
  @objc deinit
}
extension Foundation.JSONDecoder {
  public static var snakeCase: Foundation.JSONDecoder {
    get
  }
}
extension Foundation.JSONEncoder {
  public static var snakeCase: Foundation.JSONEncoder {
    get
  }
}
public protocol JSONConvertible {
  var jsonValue: ExponeaSDK.JSONValue { get }
}
extension Foundation.NSString : ExponeaSDK.JSONConvertible {
  public var jsonValue: ExponeaSDK.JSONValue {
    get
  }
}
extension Swift.String : ExponeaSDK.JSONConvertible {
  public var jsonValue: ExponeaSDK.JSONValue {
    get
  }
}
extension Swift.Bool : ExponeaSDK.JSONConvertible {
  public var jsonValue: ExponeaSDK.JSONValue {
    get
  }
}
extension Swift.Int : ExponeaSDK.JSONConvertible {
  public var jsonValue: ExponeaSDK.JSONValue {
    get
  }
}
extension Swift.Double : ExponeaSDK.JSONConvertible {
  public var jsonValue: ExponeaSDK.JSONValue {
    get
  }
}
extension Foundation.NSNull : ExponeaSDK.JSONConvertible {
  public var jsonValue: ExponeaSDK.JSONValue {
    get
  }
}
extension Swift.Dictionary : ExponeaSDK.JSONConvertible where Key == Swift.String, Value == ExponeaSDK.JSONConvertible {
  public var jsonValue: ExponeaSDK.JSONValue {
    get
  }
}
extension Swift.Array : ExponeaSDK.JSONConvertible where Element == ExponeaSDK.JSONConvertible {
  public var jsonValue: ExponeaSDK.JSONValue {
    get
  }
}
indirect public enum JSONValue {
  case string(Swift.String)
  case bool(Swift.Bool)
  case int(Swift.Int)
  case double(Swift.Double)
  case dictionary([Swift.String : ExponeaSDK.JSONValue])
  case array([ExponeaSDK.JSONValue])
  case null(Swift.String)
  public static func convert(_ dictionary: [Swift.String : Any]) -> [Swift.String : ExponeaSDK.JSONValue]
  public static func convert(_ array: [Any]) -> [ExponeaSDK.JSONValue]
}
extension ExponeaSDK.JSONValue {
  public var rawValue: Any {
    get
  }
  public var jsonConvertible: ExponeaSDK.JSONConvertible {
    get
  }
}
extension ExponeaSDK.JSONValue : Swift.Codable, Swift.Equatable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public static func == (left: ExponeaSDK.JSONValue, right: ExponeaSDK.JSONValue) -> Swift.Bool
}
extension ExponeaSDK.JSONValue {
  public var objectValue: ObjectiveC.NSObject {
    get
  }
}
public class ListScreenStyle {
  public init(emptyTitle: ExponeaSDK.TextViewStyle? = nil, emptyMessage: ExponeaSDK.TextViewStyle? = nil, errorTitle: ExponeaSDK.TextViewStyle? = nil, errorMessage: ExponeaSDK.TextViewStyle? = nil, progress: ExponeaSDK.ProgressBarStyle? = nil, list: ExponeaSDK.AppInboxListViewStyle? = nil)
  public func applyTo(_ target: ExponeaSDK.AppInboxListViewController)
  @objc deinit
}
open class Logger {
  final public let dateFormatter: Foundation.DateFormatter
  open var logLevel: ExponeaSDK.LogLevel
  required public init()
  @discardableResult
  open func log(_ level: ExponeaSDK.LogLevel, message: Swift.String, fileName: Swift.String = #file, line: Swift.Int = #line, funcName: Swift.String = #function) -> Swift.Bool
  open func logMessage(_ message: Swift.String)
  public func addLogHook(_ hook: @escaping (Swift.String) -> Swift.Void) -> Swift.String
  public func removeLogHook(with id: Swift.String)
  public func sourceFile(from filePath: Swift.String) -> Swift.String
  @objc deinit
}
public enum LogLevel : Swift.Int {
  case none
  case error
  case warning
  case verbose
  public var name: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct MessageItem : Swift.Codable, Swift.Equatable {
  public let id: Swift.String
  public let type: Swift.String
  public var read: Swift.Bool
  public let rawReceivedTime: Swift.Double?
  public let rawContent: [Swift.String : ExponeaSDK.JSONValue]?
  public var customerIds: [Swift.String : Swift.String]
  public var hasTrackingConsent: Swift.Bool {
    get
  }
  public var receivedTime: Foundation.Date {
    get
  }
  public var content: ExponeaSDK.MessageItemContent? {
    get
  }
  public static func == (lhs: ExponeaSDK.MessageItem, rhs: ExponeaSDK.MessageItem) -> Swift.Bool
  public init(id: Swift.String, type: Swift.String, read: Swift.Bool, rawReceivedTime: Swift.Double?, rawContent: [Swift.String : ExponeaSDK.JSONValue]?, customerIds: [Swift.String : Swift.String] = [:])
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct MessageItemAction : Swift.Codable, Swift.Equatable {
  public let action: Swift.String?
  public let title: Swift.String?
  public let url: Swift.String?
  public init(action: Swift.String?, title: Swift.String?, url: Swift.String?)
  public var type: ExponeaSDK.MessageItemActionType {
    get
  }
  public static func == (a: ExponeaSDK.MessageItemAction, b: ExponeaSDK.MessageItemAction) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum MessageItemActionType : Swift.String {
  case app
  case browser
  case deeplink
  case noAction
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class MessageItemCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) final public let readFlag: UIKit.UIView
  @_Concurrency.MainActor(unsafe) final public let receivedTime: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) final public let titleLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) final public let messageImage: UIKit.UIImageView
  @_Concurrency.MainActor(unsafe) final public let messageLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) final public let infoStackView: UIKit.UIStackView
  @_Concurrency.MainActor(unsafe) final public let statusView: UIKit.UIStackView
  @_Concurrency.MainActor(unsafe) final public let contentStackView: UIKit.UIStackView
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc deinit
}
extension ExponeaSDK.MessageItemCell {
  @_Concurrency.MainActor(unsafe) public func showData(_ source: ExponeaSDK.MessageItem)
  @_Concurrency.MainActor(unsafe) public func translateReceivedTime(_ source: Foundation.Date) -> Swift.String
}
public struct MessageItemContent {
  public let imageUrl: Swift.String?
  public let title: Swift.String?
  public let message: Swift.String?
  public let consentCategoryTracking: Swift.String?
  public let hasTrackingConsent: Swift.Bool
  public let trackingData: [Swift.String : ExponeaSDK.JSONValue]?
  public let actions: [ExponeaSDK.MessageItemAction]?
  public let action: ExponeaSDK.MessageItemAction?
  public let html: Swift.String?
}
public struct ErrorResponse : Swift.Codable {
  public let error: Swift.String
  public let success: Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct MultipleErrorResponse : Swift.Codable {
  public let errors: [ExponeaSDK.ErrorContent]
  public let success: Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct ErrorContent : Swift.Codable {
  public let code: Swift.Int
  public let description: Swift.String
  public let message: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct NotificationData : Swift.Codable {
  public let attributes: [Swift.String : ExponeaSDK.JSONValue]
  public var campaignData: ExponeaSDK.CampaignData
  public var eventType: Swift.String?
  public var timestamp: Swift.Double
  public var sentTimestamp: Swift.Double?
  public var campaignName: Swift.String?
  public var consentCategoryTracking: Swift.String?
  public var hasTrackingConsent: Swift.Bool
  public var considerConsent: Swift.Bool
  public init(attributes: [Swift.String : ExponeaSDK.JSONValue] = [String: JSONValue](), campaignData: ExponeaSDK.CampaignData = CampaignData(), timestamp: Swift.Double = Date().timeIntervalSince1970, consentCategoryTracking: Swift.String? = nil, hasTrackingConsent: Swift.Bool? = nil, considerConsent: Swift.Bool = true)
  public init(from decoder: Swift.Decoder) throws
  public static func deserialize(attributes: [Swift.String : Any], campaignData: [Swift.String : Any], consentCategoryTracking: Swift.String? = nil, hasTrackingConsent: Swift.Bool? = nil, considerConsent: Swift.Bool = true) -> ExponeaSDK.NotificationData?
  public static func deserialize(from data: Foundation.Data) -> ExponeaSDK.NotificationData?
  public func serialize() -> Foundation.Data?
  public func encode(to encoder: Swift.Encoder) throws
}
extension ExponeaSDK.NotificationData {
  public var properties: [Swift.String : ExponeaSDK.JSONValue] {
    get
  }
}
extension CoreData.NSPersistentContainer {
  convenience public init?(name: Swift.String, bundle: Foundation.Bundle)
}
public func onMain(_ closure: @escaping () -> Swift.Void)
public func onMain(_ closure: @autoclosure @escaping () -> Swift.Void)
public enum InAppContentBlocksStatus : Swift.String, Swift.Codable {
  case ok
  case filterNotMatched
  case doesNotExist
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct Content : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct PersonalizedInAppContentBlockResponseData : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct PersonalizedInAppContentBlockResponse : Swift.Codable {
  public let id: Swift.String
  public let status: ExponeaSDK.InAppContentBlocksStatus
  public let ttlSeconds: Swift.Int
  public var variantId: Swift.Int?
  public var hasTrackingConsent: Swift.Bool?
  public var variantName: Swift.String?
  public var contentType: ExponeaSDK.InAppContentBlockContentType?
  public var content: ExponeaSDK.Content?
  @ExponeaSDK.CodableIgnored public var ttlSeen: Foundation.Date? {
    get
    set
    _modify
  }
  @ExponeaSDK.CodableIgnored public var tag: Swift.Int? {
    get
    set
    _modify
  }
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public class ProgressBarStyle {
  public init(visible: Swift.Bool? = nil, progressColor: Swift.String? = nil, backgroundColor: Swift.String? = nil)
  public func applyTo(_ target: UIKit.UIActivityIndicatorView)
  @objc deinit
}
public protocol PushNotificationManagerDelegate : AnyObject {
  func pushNotificationOpened(with action: ExponeaSDK.ExponeaNotificationActionType, value: Swift.String?, extraData: [Swift.AnyHashable : Any]?)
  func silentPushNotificationReceived(extraData: [Swift.AnyHashable : Any]?)
}
extension ExponeaSDK.PushNotificationManagerDelegate {
  public func silentPushNotificationReceived(extraData: [Swift.AnyHashable : Any]?)
}
public struct Recommendation<T> : Swift.Codable, Swift.Equatable where T : ExponeaSDK.RecommendationUserData {
  public let systemData: ExponeaSDK.RecommendationSystemData
  public let userData: T
  public init(from decoder: Swift.Decoder) throws
  public init(systemData: ExponeaSDK.RecommendationSystemData, userData: T)
  public static func == (a: ExponeaSDK.Recommendation<T>, b: ExponeaSDK.Recommendation<T>) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
}
public struct RecommendationSystemData : Swift.Codable, Swift.Equatable {
  public let engineName: Swift.String
  public let itemId: Swift.String
  public let recommendationId: Swift.String
  public let recommendationVariantId: Swift.String?
  public init(engineName: Swift.String, itemId: Swift.String, recommendationId: Swift.String, recommendationVariantId: Swift.String?)
  public static func == (a: ExponeaSDK.RecommendationSystemData, b: ExponeaSDK.RecommendationSystemData) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public protocol RecommendationUserData : Swift.Decodable, Swift.Encodable, Swift.Equatable {
}
public struct EmptyRecommendationData : ExponeaSDK.RecommendationUserData {
  public static func == (a: ExponeaSDK.EmptyRecommendationData, b: ExponeaSDK.EmptyRecommendationData) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct RecommendationOptions : ExponeaSDK.RequestParametersType {
  public init(id: Swift.String, fillWithRandom: Swift.Bool, size: Swift.Int = 10, items: [Swift.String : Swift.String]? = nil, noTrack: Swift.Bool = false, catalogAttributesWhitelist: [Swift.String]? = nil)
  public var parameters: [Swift.String : ExponeaSDK.JSONValue] {
    get
  }
}
public struct WrappedRecommendationResponse<T> : Swift.Codable where T : ExponeaSDK.RecommendationUserData {
  public let success: Swift.Bool
  public let results: [ExponeaSDK.RecommendationResponse<T>]
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct RecommendationResponse<T> : Swift.Codable where T : ExponeaSDK.RecommendationUserData {
  public let success: Swift.Bool
  public let error: Swift.String?
  public let value: [ExponeaSDK.Recommendation<T>]?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public protocol ErrorInitialisable : Swift.Error {
  static func create(from error: Swift.Error) -> Self
}
public enum RepositoryError : Foundation.LocalizedError, ExponeaSDK.ErrorInitialisable {
  case notAuthorized(ExponeaSDK.ErrorResponse?)
  case missingData(Swift.String)
  case serverError(ExponeaSDK.MultipleErrorResponse?)
  case urlNotFound(ExponeaSDK.MultipleErrorResponse?)
  case invalidResponse(Foundation.URLResponse?)
  case connectionError
  case unknown(Swift.Error)
  public var errorDescription: Swift.String? {
    get
  }
  public static func create(from error: Swift.Error) -> ExponeaSDK.RepositoryError
}
public struct RequestFactory {
  public init(exponeaProject: ExponeaSDK.ExponeaProject, route: ExponeaSDK.Routes)
  public var path: Swift.String {
    get
  }
}
extension ExponeaSDK.RequestFactory {
  public func prepareRequest(parameters: ExponeaSDK.RequestParametersType? = nil, customerIds: [Swift.String : Swift.String]? = nil) -> Foundation.URLRequest
  public typealias CompletionHandler = ((Foundation.Data?, Foundation.URLResponse?, Swift.Error?) -> Swift.Void)
  public func handler<T>(with completion: @escaping ((ExponeaSDK.EmptyResult<T>) -> Swift.Void)) -> ExponeaSDK.RequestFactory.CompletionHandler where T : ExponeaSDK.ErrorInitialisable
  public func handler<T>(with completion: @escaping ((ExponeaSDK.Result<T>) -> Swift.Void)) -> ExponeaSDK.RequestFactory.CompletionHandler where T : Swift.Decodable
  public func mockHandler<T>(response: Foundation.Data, model: T.Type, with completion: @escaping ((ExponeaSDK.Result<T>) -> Swift.Void)) where T : Swift.Decodable
  public func process(_ response: Foundation.URLResponse?, data: Foundation.Data?, error: Swift.Error?, resultAction: @escaping ((ExponeaSDK.Result<Foundation.Data>) -> Swift.Void))
}
public protocol RequestParametersType {
  var parameters: [Swift.String : ExponeaSDK.JSONValue] { get }
  var requestParameters: [Swift.String : Any] { get }
}
extension ExponeaSDK.RequestParametersType {
  public var requestParameters: [Swift.String : Any] {
    get
  }
}
public enum Result<T> {
  case success(T)
  case failure(Swift.Error)
  public var value: T? {
    get
  }
  public var error: Swift.Error? {
    get
  }
}
public enum EmptyResult<T> where T : Swift.Error {
  case success
  case failure(T)
  public var error: T? {
    get
  }
}
public enum Routes {
  case identifyCustomer
  case customEvent
  case customerAttributes
  case campaignClick
  case consents
  case inAppMessages
  case pushSelfCheck
  case appInbox
  case appInboxMarkRead
  case inAppContentBlocks
  case personalizedInAppContentBlocks
  public var method: ExponeaSDK.HTTPMethod {
    get
  }
  public static func == (a: ExponeaSDK.Routes, b: ExponeaSDK.Routes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension Swift.Array {
  public subscript(safeIndex index: Swift.Int) -> Element? {
    get
  }
}
extension Swift.Sequence where Self == [Swift.String : Any] {
  public func removeNill() -> [Swift.String : Any]
}
extension Swift.Sequence where Self.Element == Any {
  public func removeNill() -> [Self.Element]
}
final public class ServerRepository {
  final public var configuration: ExponeaSDK.Configuration
  final public let session: Foundation.URLSession
  public init(configuration: ExponeaSDK.Configuration)
  final public func cancelRequests()
  @objc deinit
}
extension ExponeaSDK.ServerRepository : ExponeaSDK.TrackingRepository {
  final public func trackObject(_ trackingObject: ExponeaSDK.TrackingObject, completion: @escaping ((ExponeaSDK.EmptyResult<ExponeaSDK.RepositoryError>) -> Swift.Void))
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class StaticInAppContentBlocksView : UIKit.UIView, WebKit.WKNavigationDelegate {
  @_Concurrency.MainActor(unsafe) final public var refresh: ExponeaSDK.EmptyBlock?
  @_Concurrency.MainActor(unsafe) public init(placeholder: Swift.String)
  @_Concurrency.MainActor(unsafe) final public func reload()
  @_Concurrency.MainActor(unsafe) @objc final public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> Swift.Void)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class StaticInAppContentBlockView : UIKit.UIView, WebKit.WKNavigationDelegate {
  @_Concurrency.MainActor(unsafe) final public var refresh: ExponeaSDK.EmptyBlock?
  @_Concurrency.MainActor(unsafe) public init(placeholder: Swift.String)
  @_Concurrency.MainActor(unsafe) final public func reload()
  @_Concurrency.MainActor(unsafe) @objc final public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> Swift.Void)
  @objc deinit
}
public struct StaticQueueData {
  public let tag: Swift.Int
  public let placeholderId: Swift.String
  public var completion: ExponeaSDK.TypeBlock<ExponeaSDK.StaticReturnData>?
}
public struct StaticReturnData {
  public let html: Swift.String
  public let tag: Swift.Int
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class StyledAppInboxProvider : ExponeaSDK.DefaultAppInboxProvider {
  public init(_ style: ExponeaSDK.AppInboxStyle)
  override public func getAppInboxButton() -> UIKit.UIButton
  override public func getAppInboxListViewController() -> UIKit.UIViewController
  override public func getAppInboxListTableViewCell(_ cell: UIKit.UITableViewCell) -> UIKit.UITableViewCell
  override public func getAppInboxDetailViewController(_ messageId: Swift.String) -> UIKit.UIViewController
  @objc deinit
}
public class TextViewStyle {
  public init(visible: Swift.Bool? = nil, textColor: Swift.String? = nil, textSize: Swift.String? = nil, textWeight: Swift.String? = nil, textOverride: Swift.String? = nil)
  public func applyTo(_ target: UIKit.UILabel)
  @objc deinit
}
public enum TokenTrackFrequency : Swift.String, Swift.Codable {
  case onTokenChange
  case everyLaunch
  case daily
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol TrackingObject {
  var exponeaProject: ExponeaSDK.ExponeaProject { get }
  var customerIds: [Swift.String : Swift.String] { get }
  var dataTypes: [ExponeaSDK.DataType] { get }
  var timestamp: Swift.Double { get }
}
final public class EventTrackingObject : ExponeaSDK.TrackingObject, Swift.Equatable {
  final public let exponeaProject: ExponeaSDK.ExponeaProject
  final public let customerIds: [Swift.String : Swift.String]
  final public let eventType: Swift.String?
  final public let timestamp: Swift.Double
  final public let dataTypes: [ExponeaSDK.DataType]
  public init(exponeaProject: ExponeaSDK.ExponeaProject, customerIds: [Swift.String : Swift.String], eventType: Swift.String?, timestamp: Swift.Double, dataTypes: [ExponeaSDK.DataType])
  public static func == (lhs: ExponeaSDK.EventTrackingObject, rhs: ExponeaSDK.EventTrackingObject) -> Swift.Bool
  @objc deinit
}
final public class CustomerTrackingObject : ExponeaSDK.TrackingObject {
  final public let exponeaProject: ExponeaSDK.ExponeaProject
  final public let customerIds: [Swift.String : Swift.String]
  final public let timestamp: Swift.Double
  final public let dataTypes: [ExponeaSDK.DataType]
  public init(exponeaProject: ExponeaSDK.ExponeaProject, customerIds: [Swift.String : Swift.String], timestamp: Swift.Double, dataTypes: [ExponeaSDK.DataType])
  @objc deinit
}
extension ExponeaSDK.TrackingObject {
  public static func loadCustomerIdsFromUserDefaults(appGroup: Swift.String) -> [Swift.String : Swift.String]?
}
public struct TrackingParameters {
  public init(customerIds: [Swift.String : Swift.String], properties: [Swift.String : ExponeaSDK.JSONValue], timestamp: Swift.Double? = nil, eventType: Swift.String? = nil)
}
extension ExponeaSDK.TrackingParameters : ExponeaSDK.RequestParametersType {
  public var parameters: [Swift.String : ExponeaSDK.JSONValue] {
    get
  }
}
public protocol TrackingRepository {
  func trackObject(_ object: ExponeaSDK.TrackingObject, completion: @escaping ((ExponeaSDK.EmptyResult<ExponeaSDK.RepositoryError>) -> Swift.Void))
}
public typealias TypeBlock<T> = (T) -> Swift.Void
extension UIKit.UIImage {
  public class func gif(data: Foundation.Data) -> UIKit.UIImage?
  public class func gif(url: Swift.String) -> UIKit.UIImage?
  public class func gif(name: Swift.String) -> UIKit.UIImage?
  @available(iOS 9.0, *)
  public class func gif(asset: Swift.String) -> UIKit.UIImage?
}
public protocol UrlOpenerType {
  func openBrowserLink(_ urlString: Swift.String)
  func openDeeplink(_ urlString: Swift.String)
}
extension Foundation.URLRequest {
  public var describe: Swift.String {
    get
  }
}
extension Foundation.URLResponse {
  public func description(with data: Foundation.Data?, error: Swift.Error?) -> Swift.String
}
public struct UsedInAppContentBlocks : Swift.Hashable {
  public var tag: Swift.Int
  public var indexPath: Foundation.IndexPath
  public var placeholderId: Swift.String
  public var placeholder: Swift.String
  public var height: CoreFoundation.CGFloat
  public var hasBeenLoaded: Swift.Bool
  public var isActive: Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: ExponeaSDK.UsedInAppContentBlocks, b: ExponeaSDK.UsedInAppContentBlocks) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public protocol ExponeaVersionProvider {
  init()
  func getVersion() -> Swift.String
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class WKWebViewHeightCalculator : WebKit.WKWebView, WebKit.WKNavigationDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc final public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> Swift.Void)
  @objc deinit
}
extension ExponeaSDK.WKWebViewHeightCalculator {
  @_Concurrency.MainActor(unsafe) final public func loadHtml(placedholderId: Swift.String, html: Swift.String)
}
extension ExponeaSDK.EventType : Swift.Equatable {}
extension ExponeaSDK.EventType : Swift.Hashable {}
extension ExponeaSDK.EventType : Swift.RawRepresentable {}
extension ExponeaSDK.ExponeaNotificationActionType : Swift.Equatable {}
extension ExponeaSDK.ExponeaNotificationActionType : Swift.Hashable {}
extension ExponeaSDK.ExponeaNotificationActionType : Swift.RawRepresentable {}
extension ExponeaSDK.ParsingError : Swift.Equatable {}
extension ExponeaSDK.ParsingError : Swift.Hashable {}
extension ExponeaSDK.HTTPMethod : Swift.Equatable {}
extension ExponeaSDK.HTTPMethod : Swift.Hashable {}
extension ExponeaSDK.HTTPMethod : Swift.RawRepresentable {}
extension ExponeaSDK.InAppContentBlockContentType : Swift.RawRepresentable {}
extension ExponeaSDK.InAppContentBlocksFrequency : Swift.Equatable {}
extension ExponeaSDK.InAppContentBlocksFrequency : Swift.Hashable {}
extension ExponeaSDK.InAppContentBlocksFrequency : Swift.RawRepresentable {}
extension ExponeaSDK.InAppMessageFrequency : Swift.Equatable {}
extension ExponeaSDK.InAppMessageFrequency : Swift.Hashable {}
extension ExponeaSDK.InAppMessageFrequency : Swift.RawRepresentable {}
extension ExponeaSDK.InAppMessageType : Swift.Equatable {}
extension ExponeaSDK.InAppMessageType : Swift.Hashable {}
extension ExponeaSDK.InAppMessageType : Swift.RawRepresentable {}
extension ExponeaSDK.InAppMessageButtonType : Swift.Equatable {}
extension ExponeaSDK.InAppMessageButtonType : Swift.Hashable {}
extension ExponeaSDK.InAppMessageButtonType : Swift.RawRepresentable {}
extension ExponeaSDK.LogLevel : Swift.Equatable {}
extension ExponeaSDK.LogLevel : Swift.Hashable {}
extension ExponeaSDK.LogLevel : Swift.RawRepresentable {}
extension ExponeaSDK.MessageItemActionType : Swift.Equatable {}
extension ExponeaSDK.MessageItemActionType : Swift.Hashable {}
extension ExponeaSDK.MessageItemActionType : Swift.RawRepresentable {}
extension ExponeaSDK.InAppContentBlocksStatus : Swift.Equatable {}
extension ExponeaSDK.InAppContentBlocksStatus : Swift.Hashable {}
extension ExponeaSDK.InAppContentBlocksStatus : Swift.RawRepresentable {}
extension ExponeaSDK.Routes : Swift.Equatable {}
extension ExponeaSDK.Routes : Swift.Hashable {}
extension ExponeaSDK.TokenTrackFrequency : Swift.Equatable {}
extension ExponeaSDK.TokenTrackFrequency : Swift.Hashable {}
extension ExponeaSDK.TokenTrackFrequency : Swift.RawRepresentable {}
